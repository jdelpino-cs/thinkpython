#! /opt/anaconda3/envs/learningp37/bin/python python3.7
# Exercise 12.2 / From "Think Python"
# Learning and experimentation with the book "Think Python" (by Allen Downey)
# Code by José Delpino

# Exercise 12.2: More Anagrams!

from os import system, mkdir
from os.path import isdir
from time import localtime, strftime
from bibth3_strings import make_plain


def make_signature(word):
    str_list = list(word)
    str_list.sort()
    key_str = "".join(str_list)
    return key_str


def make_dict(filepath, key_gen, element_adder):
    the_file = open(filepath)
    the_dict = {}
    for line in the_file:
        line = make_plain(line)
        the_key = key_gen(line)
        element_adder(the_dict, the_key, line)
    return the_dict


def add_to_dictlist(the_dict, the_key, item):
    if the_dict.setdefault(the_key, [item]) != [item]:
        the_dict[the_key].append(item)


def key_by_lenght_value(key, value):
    lenght = len(value)
    return (lenght, key)


def invert_dict(the_dict, item_gen, element_adder):
    inv_dict = dict()
    for key in the_dict:
        value = the_dict[key]
        new_items = item_gen(key, value)
        new_key, new_value = new_items[0], new_items[1]
        element_adder(inv_dict, new_key, new_value)
    return inv_dict


def filter_the_dict(the_dict, function):
    newdict = dict()
    for key in the_dict:
        value = the_dict[key]
        if function(key, value):
            newdict[key] = value
    return newdict


def are_anagrams(key, value):
    if len(value) > 1:
        return True
    else:
        return False


def print_and_save(anagram_dict, save_it=False, print_it=True):
    n_groups = 0
    n_anagrams = 0
    if save_it:
        the_dir = "files/saved_results/"
        if not isdir(the_dir):
            mkdir(the_dir)
        filename = "anagrams- " + strftime("%c", localtime()) + ".txt"
        filepath = the_dir + filename
        the_file = open(filepath, "w")
        the_file.write("Anagrams Word List\n")
        the_file.write("Generated by José Delpino, using Python\n\n")
    if print_it:
        print("\n")
    signature_list = list(anagram_dict)
    signature_list.sort()
    for sign in signature_list:
        wordgroup = anagram_dict[sign]
        word_list = list(wordgroup)
        word_list.sort()
        n_groups += 1
        n_anagrams += len(word_list)
        ouput_str = (f"[{n_groups}] " +
                     str(sign) + " : " +
                     str(word_list) + "\n")
        if save_it:
            the_file.write(ouput_str)
        if print_it:
            print(ouput_str)
    if save_it:
        the_file.close()
    print("\n")
    print(f"There are {n_groups} anagram groups.")
    print(f"And a total of {n_anagrams} words that are anagrams.")
    print("\n")


def find_bingos(anagram_dict):
    bingos_dict = dict()
    eigth_letters = filter_the_dict(anagram_dict,
                                    lambda x, y: len(x) == 8)
    lenghts_dict = invert_dict(eigth_letters,
                               lambda x, y: (len(y), x),
                               add_to_dictlist)
    bingos_lenght = max(lenghts_dict.keys())
    signature_list = lenghts_dict[bingos_lenght]
    signature_list.sort()
    for signt in signature_list:
        bingos_dict[signt] = anagram_dict[signt]
    return bingos_dict


def print_bingos(bingos_dict):
    print("These are the bingos with more possible combinations:\n")
    for signt in bingos_dict:
        print("SIGNATURE:", signt.upper())
        words = bingos_dict[signt]
        words.sort()
        print("ANAGRAMS:", words)


if __name__ == "__main__":
    system('clear')
    filepath = "From the book/master/code/words.txt"
    signatures_dict = make_dict(filepath,
                                key_gen=make_signature,
                                element_adder=add_to_dictlist)
    anagram_dict = filter_the_dict(signatures_dict, are_anagrams)
    print_and_save(anagram_dict, save_it=False, print_it=False)
    bingos_dict = find_bingos(anagram_dict)
    print_bingos(bingos_dict)
    print("\n\n")
