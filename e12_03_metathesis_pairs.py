#! /opt/anaconda3/envs/learningp37/bin/python python3.7
# Exercise 12.3 / From "Think Python"
# Learning and experimentation with the book "Think Python" (by Allen Downey)
# Code by José Delpino

# Exercise 12.3: Metathesis pairs

"""I found 3,311 metathesis pair, that is, 6,392 anagrams words from the
anagrams dictionary that are metathesis. The anagram dictionary
has 23,869 words.
"""

from os import system, mkdir
from os.path import isdir
from time import localtime, strftime
from bibth3_dicts import make_ddicts, add_to_dictlist, filter_ddicts
from e12_02_more_anagrams import make_signature as mk_signtr
from e12_02_more_anagrams import are_anagrams


def is_metathesis(str1, str2):
    swaps = 0
    for char1, char2 in zip(str1, str2):
        if char1 != char2:
            swaps += 1
        if swaps > 2:
            return False
    if swaps == 2:
        return True
    return False


def find_metathesis_pairs(anagrams_dict):
    metathesis_dict = dict()
    for lenght in anagrams_dict:
        anagram_group = anagrams_dict[lenght]
        for signature in anagram_group:
            anagrams = anagram_group[signature]
            anagrams.sort()
            n_anagrams = len(anagrams)
            for i in range(n_anagrams-1):
                word = anagrams[i]
                j = i + 1
                k = n_anagrams-j
                pairs = list(zip([word]*k, anagrams[j:]))
                for pair in pairs:
                    if is_metathesis(*pair):
                        metathesis_dict[pair] = None
    return metathesis_dict


def print_and_save(lenghts_dict, save_it=False, print_it=True):
    n_groups = 0
    n_signatures = 0
    n_words = 0
    if save_it:
        the_dir = "files/saved_results/"
        if not isdir(the_dir):
            mkdir(the_dir)
        filename = "words- " + strftime("%c", localtime()) + ".txt"
        filepath = the_dir + filename
        the_file = open(filepath, "w")
        the_file.write("Word List\n")
        the_file.write("Generated by José Delpino, using Python\n\n")
    if print_it:
        print("\n")
    lenghts_list = list(lenghts_dict)
    lenghts_list.sort()
    for lenght in lenghts_list:
        signature_dict = lenghts_dict[lenght]
        signature_list = list(signature_dict)
        signature_list.sort()
        n_groups += 1
        for sign in signature_list:
            wordgroup = signature_dict[sign]
            word_list = list(wordgroup)
            word_list.sort()
            n_signatures += 1
            n_words += len(word_list)
            ouput_str = (f"[{n_signatures}] [Lenght={lenght}] " +
                         f"Signature #{n_signatures}: " +
                         str(sign.upper()) + " : " +
                         str(word_list) + "\n")
            if save_it:
                the_file.write(ouput_str)
            if print_it:
                print(ouput_str)
    if save_it:
        the_file.close()
    print("\n")
    print(f"There are {n_groups} word groups.")
    print(f"And a total of {n_words} words.")
    print("\n")


def print_metathesis(metathesis_dict):
    count = 1
    for pair in metathesis_dict:
        print(f"[{count}]" + str(pair))
        count += 1


if __name__ == "__main__":
    system('clear')
    filepath = "From the book/master/code/words.txt"

    signatures_dict = make_ddicts(
                            filepath,
                            key_gen=lambda line: len(line),
                            items_gen=lambda k, l: (mk_signtr(l), l),
                            value_adder=add_to_dictlist,
                            method="as_an_element")

    anagrams_dict = filter_ddicts(
                            signatures_dict,
                            the_filter=lambda key, sub_dict: True,
                            sub_filter=lambda sk, va, sd: are_anagrams(sk, va),
                            value_adder=add_to_dictlist,
                            method="as_the_iterable")

    print_and_save(anagrams_dict, save_it=False, print_it=False)

    metathesis_dict = find_metathesis_pairs(anagrams_dict)
    print_metathesis(metathesis_dict)
    # print(signatures_dict)

    print("\n\n")
